# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache MinGW Binaries
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey\bin
            C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
          key: mingw-${{ runner.os }}-13.2.0

      - name: Install MinGW-w64 (if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          choco install mingw -y
          echo "C:\ProgramData\chocolatey\bin" >> $GITHUB_PATH
          echo "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin" >> $GITHUB_PATH

      - name: Verify GCC
        run: gcc --version

      - name: Configure CMake (MinGW)
        run: cmake -B ${{github.workspace}}/build -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++

      - name: Build (MinGW)
        run: cmake --build ${{github.workspace}}/build -- -j 2  
